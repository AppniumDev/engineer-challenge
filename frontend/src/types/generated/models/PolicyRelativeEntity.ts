/* tslint:disable */
/* eslint-disable */
/**
 * Feather Challenge
 * Feather Policy and Customer API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomerEntity } from './CustomerEntity';
import {
    CustomerEntityFromJSON,
    CustomerEntityFromJSONTyped,
    CustomerEntityToJSON,
} from './CustomerEntity';
import type { PolicyEntity } from './PolicyEntity';
import {
    PolicyEntityFromJSON,
    PolicyEntityFromJSONTyped,
    PolicyEntityToJSON,
} from './PolicyEntity';

/**
 * 
 * @export
 * @interface PolicyRelativeEntity
 */
export interface PolicyRelativeEntity {
    /**
     * 
     * @type {string}
     * @memberof PolicyRelativeEntity
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRelativeEntity
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRelativeEntity
     */
    policyId: string;
    /**
     * 
     * @type {PolicyEntity}
     * @memberof PolicyRelativeEntity
     */
    policy?: PolicyEntity;
    /**
     * 
     * @type {string}
     * @memberof PolicyRelativeEntity
     */
    relativeId: string;
    /**
     * 
     * @type {CustomerEntity}
     * @memberof PolicyRelativeEntity
     */
    relative?: CustomerEntity;
}

/**
 * Check if a given object implements the PolicyRelativeEntity interface.
 */
export function instanceOfPolicyRelativeEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "policyId" in value;
    isInstance = isInstance && "relativeId" in value;

    return isInstance;
}

export function PolicyRelativeEntityFromJSON(json: any): PolicyRelativeEntity {
    return PolicyRelativeEntityFromJSONTyped(json, false);
}

export function PolicyRelativeEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyRelativeEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'role': json['role'],
        'policyId': json['policyId'],
        'policy': !exists(json, 'policy') ? undefined : PolicyEntityFromJSON(json['policy']),
        'relativeId': json['relativeId'],
        'relative': !exists(json, 'relative') ? undefined : CustomerEntityFromJSON(json['relative']),
    };
}

export function PolicyRelativeEntityToJSON(value?: PolicyRelativeEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'role': value.role,
        'policyId': value.policyId,
        'policy': PolicyEntityToJSON(value.policy),
        'relativeId': value.relativeId,
        'relative': CustomerEntityToJSON(value.relative),
    };
}

