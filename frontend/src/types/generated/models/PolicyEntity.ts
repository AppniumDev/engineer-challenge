/* tslint:disable */
/* eslint-disable */
/**
 * Feather Challenge
 * Feather Policy and Customer API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomerEntity } from './CustomerEntity';
import {
    CustomerEntityFromJSON,
    CustomerEntityFromJSONTyped,
    CustomerEntityToJSON,
} from './CustomerEntity';
import type { PolicyRelativeEntity } from './PolicyRelativeEntity';
import {
    PolicyRelativeEntityFromJSON,
    PolicyRelativeEntityFromJSONTyped,
    PolicyRelativeEntityToJSON,
} from './PolicyRelativeEntity';

/**
 * 
 * @export
 * @interface PolicyEntity
 */
export interface PolicyEntity {
    /**
     * 
     * @type {string}
     * @memberof PolicyEntity
     */
    insuranceType: PolicyEntityInsuranceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyEntity
     */
    status: PolicyEntityStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyEntity
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyEntity
     */
    provider: string;
    /**
     * 
     * @type {CustomerEntity}
     * @memberof PolicyEntity
     */
    customer?: CustomerEntity;
    /**
     * 
     * @type {string}
     * @memberof PolicyEntity
     */
    customerId: string;
    /**
     * 
     * @type {Array<PolicyRelativeEntity>}
     * @memberof PolicyEntity
     */
    relatives: Array<PolicyRelativeEntity>;
    /**
     * 
     * @type {Date}
     * @memberof PolicyEntity
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof PolicyEntity
     */
    endDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof PolicyEntity
     */
    createdAt: Date;
}


/**
 * @export
 */
export const PolicyEntityInsuranceTypeEnum = {
    Liability: 'LIABILITY',
    Household: 'HOUSEHOLD',
    Health: 'HEALTH'
} as const;
export type PolicyEntityInsuranceTypeEnum = typeof PolicyEntityInsuranceTypeEnum[keyof typeof PolicyEntityInsuranceTypeEnum];

/**
 * @export
 */
export const PolicyEntityStatusEnum = {
    Active: 'ACTIVE',
    Pending: 'PENDING',
    Cancelled: 'CANCELLED',
    DroppedOut: 'DROPPED_OUT'
} as const;
export type PolicyEntityStatusEnum = typeof PolicyEntityStatusEnum[keyof typeof PolicyEntityStatusEnum];


/**
 * Check if a given object implements the PolicyEntity interface.
 */
export function instanceOfPolicyEntity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "insuranceType" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "customerId" in value;
    isInstance = isInstance && "relatives" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function PolicyEntityFromJSON(json: any): PolicyEntity {
    return PolicyEntityFromJSONTyped(json, false);
}

export function PolicyEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'insuranceType': json['insuranceType'],
        'status': json['status'],
        'id': json['id'],
        'provider': json['provider'],
        'customer': !exists(json, 'customer') ? undefined : CustomerEntityFromJSON(json['customer']),
        'customerId': json['customerId'],
        'relatives': ((json['relatives'] as Array<any>).map(PolicyRelativeEntityFromJSON)),
        'startDate': (new Date(json['startDate'])),
        'endDate': (new Date(json['endDate'])),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function PolicyEntityToJSON(value?: PolicyEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'insuranceType': value.insuranceType,
        'status': value.status,
        'id': value.id,
        'provider': value.provider,
        'customer': CustomerEntityToJSON(value.customer),
        'customerId': value.customerId,
        'relatives': ((value.relatives as Array<any>).map(PolicyRelativeEntityToJSON)),
        'startDate': (value.startDate.toISOString()),
        'endDate': (value.endDate.toISOString()),
        'createdAt': (value.createdAt.toISOString()),
    };
}

